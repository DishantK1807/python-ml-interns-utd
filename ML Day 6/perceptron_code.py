# -*- coding: utf-8 -*-
"""Perceptron Code

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hBXXWwGIJAPtz26xKMOEUcwclrO5zHFH
"""

import numpy as np
from sklearn.datasets import load_iris
from sklearn.linear_model import Perceptron

iris = load_iris()
X = iris.data[:, (2, 3)]

print(iris)
print(X)

y = (iris.target==0).astype(np.int8)

p = Perceptron(random_state=42,
              max_iter=10,
              tol=0.001)
p.fit(X, y)

for value in X:
    pred = p.predict([value])
    print([pred])

from sklearn.neural_network import MLPClassifier

clf = MLPClassifier(solver='lbfgs', alpha=1e-5,
                    hidden_layer_sizes=(5, 2), random_state=1)

print(clf.fit(X, y))

print("weights between input and first hidden layer:")
print(clf.coefs_[0])
print("\nweights between first hidden and second hidden layer:")
print(clf.coefs_[1])

print("w0 = ", clf.coefs_[0][0][0])
print("w1 = ", clf.coefs_[0][1][0])

for i in range(len(clf.coefs_)):
    number_neurons_in_layer = clf.coefs_[i].shape[1]
    for j in range(number_neurons_in_layer):
        weights = clf.coefs_[i][:,j]
        print(i, j, weights, end=", ")
        print()
    print()

print("Bias values for first hidden layer:")
print(clf.intercepts_[0])
print("\nBias values for second hidden layer:")
print(clf.intercepts_[1])