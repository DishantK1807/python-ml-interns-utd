# -*- coding: utf-8 -*-
"""Decision_Tree_GridSearch.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jFsGCBde-zWkf4gvC5x5-4ysg2CmYJep
"""

from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV
import numpy as np
import pandas as pd
from sklearn import preprocessing
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import classification_report
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import LabelEncoder
from sklearn.tree import DecisionTreeClassifier

import sys
import warnings
warnings.simplefilter('ignore')

print(__doc__)

#Load dataset
breast_cancer = datasets.load_breast_cancer()

X = breast_cancer.data
y = breast_cancer.target
labelencoder_Y = LabelEncoder()
y = labelencoder_Y.fit_transform(y)
# Split the dataset in two equal parts
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.5, random_state=0)
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

tuned_parameters = [{'max_depth': [1,10, 100, 1000],
                     'min_samples_split': [2,4,5,10,15,20],
                     'min_samples_leaf': [1,2,5,10,15],
                     'min_impurity_decrease': [0,0.01,0.001,0.0001]}]

scores = ['precision', 'recall']


for score in scores:

  print("#Tuning")
  print()
  cv_list = [5,10,15,20,25]
  for cv1 in cv_list:

    clf = GridSearchCV(DecisionTreeClassifier(), tuned_parameters, cv= cv1, scoring='%s_macro' % score)

    clf.fit(X_train, y_train)

    print("Best parameters set found on set:")
    print()
    print(clf.best_params_)
    print()
    print("Grid scores on dev set:")
    print()
    means = clf.cv_results_['mean_test_score']
    stds = clf.cv_results_['std_test_score']

    for mean, std, params in zip(means, stds, clf.cv_results_['params']):
      print("%0.3f (+/-%0.03f) for %r" % (mean, std*2, params))


    print()
    print("Classification report:")



    y_true, y_pred = y_test, clf.predict(X_test)

    print(classification_report(y_true, y_pred))
    print()